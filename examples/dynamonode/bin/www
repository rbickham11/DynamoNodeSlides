#!/usr/bin/env node
'use strict';

const DynamoTableCollection = require('../dynamo/tablecollection');
const dynamoProvider = require('../dynamo/provider');

initializeDynamoModels().then(() => {
  console.log('Dynamo Ready');

  appStart();
}, err => {
  console.log(err);
  process.exit(1);
});

/**
 * Module dependencies.
 */

function appStart() {
  let app = require('../app');

  const debug = require('debug')('sift:server');
  const http = require('http');

  const port = 4000;

  app.set('port', port);

  let server = http.createServer(app);

  server.listen(port);
  console.log('Server listening on port ' + port);
  server.on('error', onError);
  server.on('listening', onListening);

    /**
     * Event listener for HTTP server "error" event.
     */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

        // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

    /**
     * Event listener for HTTP server "listening" event.
     */

  function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}

function initializeDynamoModels() {
  let appTables = new DynamoTableCollection('dynamotalk_');

  return appTables.initialize().then(() => {
    dynamoProvider.appTables = appTables;
  });
}
